<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Admitted to UPenn</title>
    <link href="/2021/01/27/Admission/"/>
    <url>/2021/01/27/Admission/</url>
    
    <content type="html"><![CDATA[<p><img src="offer.png"></p><p>Excited!</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cache</title>
    <link href="/2020/12/17/Cache/"/>
    <url>/2020/12/17/Cache/</url>
    
    <content type="html"><![CDATA[<h1 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h1><h2 id="Cache-Basics"><a href="#Cache-Basics" class="headerlink" title="Cache Basics"></a>Cache Basics</h2><ul><li>Caches are divided into <strong>cache blocks</strong> (also called <strong>cache lines</strong>), which may be of various sizes.<ul><li>The <strong>number of blocks</strong> in a cache is usually a power of 2</li><li>Each block in the cache has a <strong>block index</strong></li></ul></li></ul><h2 id="Direct-mapped-cache"><a href="#Direct-mapped-cache" class="headerlink" title="Direct-mapped cache"></a>Direct-mapped cache</h2><ul><li>A <strong>direct-mapped cache</strong> is the simplest approach<ul><li>Each <strong>main memory address</strong> maps to exactly <strong>one cache block</strong>.</li></ul></li></ul><p><img src="DM_cache.jpg" alt="A simple direct-mapped cache"></p><h3 id="How-can-we-compute-the-mapping"><a href="#How-can-we-compute-the-mapping" class="headerlink" title="How can we compute the mapping?"></a>How can we compute the mapping?</h3><ol><li><p>The <strong>mod (remainder)</strong> operator</p><p> If the cache contains $2^k$ blocks,<br> then the data at memory address $i$ would go to cache block index $ i\ mod\ 2^k $.</p></li><li><p>The <strong>least-significant bits</strong> (equivalent as computing the mod)</p><p> Take the least significant $k$ bits of the memory address $i$ as the cache block index.</p></li></ol><h3 id="How-to-distinguish-between-different-memory-addresses-that-map-to-the-same-cache-block"><a href="#How-to-distinguish-between-different-memory-addresses-that-map-to-the-same-cache-block" class="headerlink" title="How to distinguish between different memory addresses that map to the same cache block?"></a>How to distinguish between different memory addresses that map to the same cache block?</h3><p>Adding <strong>tags</strong> to the cache, which supply the rest of the address bits.</p><p><img src="DM_cache_tag.jpg" alt="Adding tags"></p><p>Now we can tell exactly which addresses of main memory are stored in the cache, by concatenating the cache block tags with the block indices.</p><p><img src="DM_cache_tag_concat.jpg" alt="Restore the memory address with the cache block tags and indices"></p><h3 id="The-Valid-Bit"><a href="#The-Valid-Bit" class="headerlink" title="The Valid Bit"></a>The Valid Bit</h3><p>Add a <strong>valid bit</strong> for each cache block to indicate whether a cache block contains valid data.</p><ul><li>When the system is initialized, all the valid bits are set to 0.</li><li>When data is loaded into a particular cache block, the correspondng valid bit is set to 1.</li></ul><p>The cache contains not only the copies of the data in memory.<br>It also has bits to help us find the data within the cache and verify its validity.</p><h2 id="Cache-Hit-Miss"><a href="#Cache-Hit-Miss" class="headerlink" title="Cache Hit/Miss"></a>Cache Hit/Miss</h2><p>Cache controller</p><h2 id="Cache-Performance"><a href="#Cache-Performance" class="headerlink" title="Cache Performance"></a>Cache Performance</h2><p>AMAT</p><h2 id="Fully-Associative-Cache"><a href="#Fully-Associative-Cache" class="headerlink" title="Fully Associative Cache"></a>Fully Associative Cache</h2><p>A <strong>fully associative cache</strong> permits data to be stored in <em>any</em> cache block, instead of forcing each memory address into one particular block.</p><h3 id="Price-of-full-associativity"><a href="#Price-of-full-associativity" class="headerlink" title="Price of full associativity"></a>Price of full associativity</h3><p>Expensive to implement.</p><ul><li><p>No <strong>index</strong> field, the <em>entire</em> address must be used as the <strong>tag</strong>, increasing the total cache size.</p></li><li><p>Data could be anywhere in the cache, so we must check the <strong>tag</strong> of <em>every</em> cache block. That&#39;s a lot of <strong>comparators</strong>!</p></li></ul><h2 id="Set-Associativity"><a href="#Set-Associativity" class="headerlink" title="Set Associativity"></a>Set Associativity</h2><p>A <strong>set-associative cache</strong> is an intermediate possibility between the direct-mapped cache and the fully associative cache.</p><ul><li>The cache is divided into <em>groups</em> of blocks, called <strong>sets</strong>.</li><li>Each memory address maps to exactly one <strong>set</strong> in the cache, but data may be placed in <em>any</em> block within that set.</li></ul><p>If each set has $2^x$ blocks, the cache is an $2^x$-way associative cache.<br>way associativity = number of blocks in the set.</p><p><img src="Set-associativity.jpg" alt="Set Associativity"></p><h3 id="Locating-a-set-associative-block"><a href="#Locating-a-set-associative-block" class="headerlink" title="Locating a set associative block"></a>Locating a set associative block</h3><p>We can determine where a memory address belongs in an associative cache in a similar way as before.</p><p>If a cache has $2^s$ sets and each block has $2^n$ bytes, the memory address $i$ can be partitioned as follows.</p><p><img src="address_part.jpg" alt="Memory Address Partition"></p><p>Block Offset = $i\ mod\ 2^n$</p><p>Block Address = $i\ / 2^n$</p><p>Set Index = $i\ mod\ 2^s$</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://courses.cs.washington.edu/courses/cse378/09wi/lectures/lec15.pdf">UW CS378 Lec15</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>TA</category>
      
      <category>CS211</category>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Architecture</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS283 Lecture 02</title>
    <link href="/2020/11/21/CS283-Lec02/"/>
    <url>/2020/11/21/CS283-Lec02/</url>
    
    <content type="html"><![CDATA[<h1 id="Lecture-02-Kinematics"><a href="#Lecture-02-Kinematics" class="headerlink" title="Lecture 02 Kinematics"></a>Lecture 02 Kinematics</h1><h2 id="Odometry"><a href="#Odometry" class="headerlink" title="Odometry"></a>Odometry</h2><p>Motivation: Autonomous mobile robots need to know <strong>where</strong> they <strong>are</strong>.</p><p>If the robot knows how fast its wheels turned, it can infer how itself moved, and thus knowing where itself is.</p><ul><li>Dead reckoning</li><li>Sources of error</li></ul><h2 id="Mobile-Robots-with-Wheels"><a href="#Mobile-Robots-with-Wheels" class="headerlink" title="Mobile Robots with Wheels"></a>Mobile Robots with Wheels</h2><ul><li>3 wheels are sufficient to guarantee stability</li></ul><h2 id="Four-Basic-Wheels-Types"><a href="#Four-Basic-Wheels-Types" class="headerlink" title="Four Basic Wheels Types"></a>Four Basic Wheels Types</h2><ul><li>Standard wheel: 2 DOF</li><li>Castor wheel: 3 DOF</li><li>Swedish wheel: 3 DOF</li><li>Ball or spherical wheel: suspension not solved</li></ul><h2 id="Coordinate-System"><a href="#Coordinate-System" class="headerlink" title="Coordinate System"></a>Coordinate System</h2><p>Right Hand Coordinate System</p><ul><li>Right Hand<ul><li>x-axis: index finger</li><li>y-axis: middle finger</li><li>z-axis: thumb</li></ul></li></ul><p><img src="Lec02_1.jpg" alt="xyz coordinate"></p><ul><li>Right Hand<ul><li>Thumb: positive direction of the rotation axis: </li><li>The other 4 fingers: positive direction of rotation (counter-clockwise)</li></ul></li></ul><p><img src="Lec02_2.jpg" alt="Rotation"></p><h2 id="Odometry-1"><a href="#Odometry-1" class="headerlink" title="Odometry"></a>Odometry</h2><p>With respect to the robot&#39;s start pose:<br>Where is the robot now?</p><p>Two approaches (same result):</p><ul><li>Geometry (easy in 2D)</li><li>Transforms (better for 3D)</li></ul><h2 id="Frame-of-Referecne"><a href="#Frame-of-Referecne" class="headerlink" title="Frame of Referecne"></a>Frame of Referecne</h2><ul><li><p>$F_{R[X]}$: The <u><strong>F</strong>rame of reference</u> (the local coordinate system) of the <u><strong>R</strong>obot</u> at <u>time <strong>X</strong></u></p></li><li><p>$O_{R[X]}$: Origin of $F_{R[X]}$ (coordinates $(0,0)$)</p></li></ul><h2 id="Position-Orientaton-amp-Pose"><a href="#Position-Orientaton-amp-Pose" class="headerlink" title="Position, Orientaton &amp; Pose"></a>Position, Orientaton &amp; Pose</h2><ul><li><p>Position: </p><ul><li>$\left(\begin{matrix}<br>x\<br>y<br>\end{matrix} \right)$ coordinates of any object or point (or another frame)</li><li>with respect to (wrt.) a specified frame</li></ul></li><li><p>Orientation:</p><ul><li>$\left(\begin{matrix}<br>\Theta<br>\end{matrix} \right)$ angle of any oriented object (or another frame)</li><li>with respect to (wrt.) a specified frame</li></ul></li><li><p>Pose:</p><ul><li>$\left(\begin{matrix}<br>x\<br>y\<br>\Theta<br>\end{matrix} \right)$ position and orientation of any oriented object </li><li>with respect to (wrt.) a specified frame</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>Lecture Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS283 Lecture 01</title>
    <link href="/2020/11/21/CS283-Lec01/"/>
    <url>/2020/11/21/CS283-Lec01/</url>
    
    <content type="html"><![CDATA[<h1 id="Lecture-01-Introduction"><a href="#Lecture-01-Introduction" class="headerlink" title="Lecture 01 Introduction"></a>Lecture 01 Introduction</h1><h2 id="What-is-a-Robot"><a href="#What-is-a-Robot" class="headerlink" title="What is a Robot"></a>What is a Robot</h2><p>Definition: A <strong>machine</strong> capable of performing complex tasks in the physical world,<br>that is using sensors to perceive the environment and acts tele-operated or autonomous.</p><h2 id="Autonomous-Mobile-Robotics"><a href="#Autonomous-Mobile-Robotics" class="headerlink" title="Autonomous Mobile Robotics"></a>Autonomous Mobile Robotics</h2><p>Autonomous mobile robots move around the environment.<br>Therefore <strong>ALL</strong> of them: </p><ul><li>They need to know <strong>where</strong> they <strong>are</strong><ul><li>Global Positioning System (GPS)</li><li>Guiding system</li><li>Model of the environment</li></ul></li><li>They need to know <strong>where</strong> their <strong>goal</strong> is</li><li>They need to know <strong>how</strong> to get there<ul><li>Different levels:<ul><li>Control</li><li>Navigation</li><li>Planning</li></ul></li></ul></li></ul><p><strong>Most important capability</strong> (for autonomous mobile robots): </p><p><strong>How to get from place A to place B?</strong> (safely and efficiently)</p><h2 id="General-Control-Scheme-for-Mobile-Robot-Systems"><a href="#General-Control-Scheme-for-Mobile-Robot-Systems" class="headerlink" title="General Control Scheme for Mobile Robot Systems"></a>General Control Scheme for Mobile Robot Systems</h2><p><img src="Lec01_1.jpg" alt="Control scheme for mobile robot systems"></p><h2 id="Programming-Review"><a href="#Programming-Review" class="headerlink" title="Programming Review"></a>Programming Review</h2><h3 id="Process-vs-Thread"><a href="#Process-vs-Thread" class="headerlink" title="Process vs. Thread"></a>Process vs. Thread</h3><ul><li><p>Process: Execution of one instance of a computer program</p><ul><li>Each process has its own virtual memory<ul><li>Contains only code and data from this program, the libraries and the OS</li><li>Other processes (programs) cannot access this memory (shared memory access is possible but complicated)</li></ul></li><li>OS Scheduling<ul><li>OS can give higher or lower priority to certain processes</li><li>Linux 命令 <code>top</code>，常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</li></ul></li></ul></li><li><p>Multi-Threading 多线程</p><ul><li>In one process, multiple threads =&gt; parallel execution</li><li>🙂 Code and Memory is shared =&gt; easy exchange of data, save memory</li><li>😐 Synchronization can be tricky (mutex, dead lock, race condition)</li><li>🙁 If one thread crashes, the whole process (all threads) die</li></ul></li></ul><p>总结：进程就是每个执行的程序，而一个进程中可以有多个线程并行执行。这多个线程互相分享数据和内存，需要考虑它们之间同步的问题。如果其中一个线程崩溃，那么所有线程都会结束。</p><h3 id="Processes-and-Threads-in-Robotics"><a href="#Processes-and-Threads-in-Robotics" class="headerlink" title="Processes and Threads in Robotics"></a>Processes and Threads in Robotics</h3><h4 id="Robot-Operating-System-ROS-Multiple-Processes"><a href="#Robot-Operating-System-ROS-Multiple-Processes" class="headerlink" title="Robot Operating System (ROS): Multiple Processes"></a>Robot Operating System (ROS): Multiple Processes</h4><ul><li>Each <strong>component</strong> runs in its own <strong>process</strong>: called <u><strong>node</strong></u></li><li>A <u><strong>node</strong></u> can have multiple threads =&gt; faster computation</li><li><u><strong>Nodes</strong></u> communicate using <u><strong>messages</strong></u> (and <u><strong>services</strong></u>)</li><li>A <u><strong>node</strong></u> can send ( <u><strong>publish</strong></u> ) <u><strong>messages</strong></u> under different names called <u><strong>topic</strong></u></li><li>A <u><strong>node</strong></u> can listen to ( <u><strong>subscribe</strong></u> ) <u><strong>messages</strong></u> under different <u><strong>topics</strong></u></li></ul><h4 id="ROS-Messages"><a href="#ROS-Messages" class="headerlink" title="ROS Messages"></a>ROS Messages</h4><ul><li><p><u><strong>Messages</strong></u> are transfered over the network (TCP/IP) =&gt; multiple computers work together transparently</p></li><li><p>🙁 <u><strong>Messages</strong></u> are serialized, copied and de-serialized even if both nodes are on the same computer =&gt; <strong>slow</strong> (compared to pointer passing)</p><ul><li>Optimization: <u><strong>Nodelet</strong></u> (run different nodes in the SAME process =&gt; pointer passing =&gt; fast)</li></ul></li><li><p><u><strong>Messages</strong></u> are often passed around as <u><strong>shared pointers</strong></u> which are </p><ul><li>&quot;write protected&quot; using the <code>const</code> keyword (cannot be changed)</li><li>The shared pointers take the message type as template argument</li><li>Shared pointers can be accessed like normal pointers</li></ul></li><li><p>Create own message: Text format</p></li></ul><h4 id="ROS-nodes"><a href="#ROS-nodes" class="headerlink" title="ROS nodes"></a>ROS nodes</h4><ul><li><u><strong>ROS core</strong></u>: keep track which <u><strong>nodes</strong></u> are running and their <u><strong>topics</strong></u></li><li>Show all <u><strong>nodes</strong></u> and <u><strong>topics</strong></u> in a graph: <code>rosrun rqt_graph rqt_graph</code></li></ul><h4 id="ROS-Services"><a href="#ROS-Services" class="headerlink" title="ROS Services"></a>ROS Services</h4><h3 id="C-Programming"><a href="#C-Programming" class="headerlink" title="C++ Programming"></a>C++ Programming</h3><ul><li><p>C++ Object Orientation</p><ul><li><a href="https://www.runoob.com/cplusplus/cpp-classes-objects.html">C++ 面向对象</a></li></ul></li><li><p>C++ Constant Variables 常量</p><ul><li>Declare variables or objects that do not change (anymore) in the code: <code>const</code></li><li>Used for <strong>program-correctness</strong>, especially for <strong>multi-threading</strong>:<ul><li>Share the data (e.g. images)</li><li>Make it read only via <code>const</code></li></ul></li></ul></li><li><p>C++ Templates</p><ul><li><a href="https://www.runoob.com/cplusplus/cpp-templates.html">C++ 模板</a></li></ul></li><li><p>C++ Shared Pointer</p><ul><li><a href="https://en.cppreference.com/w/cpp/memory/shared_ptr">C++ Shared Pointer</a></li><li><a href="https://blog.csdn.net/thinkerleo1997/article/details/78754919">C++ 中的智能指针：shared_ptr 的介绍和用法</a></li></ul></li></ul><h3 id="Compiler-Linker"><a href="#Compiler-Linker" class="headerlink" title="Compiler, Linker"></a>Compiler, Linker</h3><ul><li>Standard in Linux: gcc: <strong>G</strong>NU <strong>C</strong>ompiler <strong>C</strong>ollection</li><li><strong>Compiler</strong>: Create machine code out of programming language</li><li><strong>Linker</strong>: Link the machine code with other machine code (provided by libraries)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>Lecture Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab1</title>
    <link href="/2020/11/18/Lab1/"/>
    <url>/2020/11/18/Lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="Lab-1"><a href="#Lab-1" class="headerlink" title="Lab 1"></a>Lab 1</h1><h2 id="Optimal-Replacement-Policy"><a href="#Optimal-Replacement-Policy" class="headerlink" title="Optimal Replacement Policy"></a>Optimal Replacement Policy</h2><p>Optimal replacement is to evict a cache block with the longest reuse distance in the future.<br>To implement optimal replacement policy, we need to know the memory access trace in the future.</p><p>This is impossible in real CPUs, but in a simulator like Sniper, we can model it.</p><p>We need to do one or multiple passes of memory references of both instructions and data for a program. Sniper can produce a trace of memory references, with which we can develop our optimal replacement by looking ahead of the future. To facilitate the implementation, we can consider doing an offline analysis of the trace to help our afterward online replacement, or do them simultaneously in one online round, or both.</p><h3 id="How-to-get-Memory-Access-Trace"><a href="#How-to-get-Memory-Access-Trace" class="headerlink" title="How to get Memory Access Trace"></a>How to get Memory Access Trace</h3><p>Refer to: </p><ol><li><a href="https://groups.google.com/g/snipersim/c/WMNVKJvw3PU/m/55UjDEubAGQJ?pli=1">How to print out the trace containing only the memory-accessing instructions of a multi-threaded benchmark in a per-thread manner?</a></li><li><a href="https://groups.google.com/g/snipersim/c/4CnjYwSagT4/m/Dc5FPYr3ZnYJ?pli=1">Obtaining application&#39;s memory trace</a></li></ol><h2 id="Cache-Inclusion-Policy"><a href="#Cache-Inclusion-Policy" class="headerlink" title="Cache Inclusion Policy"></a>Cache Inclusion Policy</h2><ul><li><p>Inclusive: 高层级cache中的数据全部出现在低层级cache中</p><ul><li>cache层级：数字越小，层级越高 (e.g. L1高，L2低)</li><li>Lower level cache is inclusive of the higher level cache (e.g. L2 is inclusive of L1)</li></ul></li><li><p>Exclusive: 低层级cache只含有不在高层级cache中出现的数据</p><ul><li>Lower level cache is exclusive of the higher level cache (e.g. L2 is exclusive of L1)</li></ul></li><li><p>Non-Inclusive Non-Exclusive (NINE): 低层级cache既不是严格incluseive，也不是严格exclusive of the 高层级cache</p></li></ul><p>Refer to:</p><ol><li><a href="https://groups.google.com/g/snipersim/c/_NJu8DXCVVs/m/uL3Vo24OAAAJ">Exclusive or Inclusive caches</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>TA</category>
      
      <category>CS211</category>
      
      <category>Lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Architecture</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoveIt!</title>
    <link href="/2020/11/17/MoveIt!/"/>
    <url>/2020/11/17/MoveIt!/</url>
    
    <content type="html"><![CDATA[<h1 id="MoveIt"><a href="#MoveIt" class="headerlink" title="MoveIt!"></a>MoveIt!</h1><h2 id="Move-Group-ROS-Node-C-Interface"><a href="#Move-Group-ROS-Node-C-Interface" class="headerlink" title="Move Group (ROS Node) C++ Interface"></a>Move Group (ROS Node) C++ Interface</h2><p>In MoveIt, the simplest user interface is through the <code>MoveGroupInterface</code> class.</p><p>提供了简单的方式来 setting joint or pose goals, creating motion plans, moving the robot, adding objects into the environment and attaching/detaching objects from the robot. </p><p>This interface communicates over ROS topics, services, and actions to the MoveGroup Node.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>[MoveIt!入门教程](<a href="https://www.ncnynl.com/archives/201610/947.html%EF%BC%89">https://www.ncnynl.com/archives/201610/947.html）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS Filesystem</title>
    <link href="/2020/11/17/ROS_Filesystem/"/>
    <url>/2020/11/17/ROS_Filesystem/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS-Filesystem"><a href="#ROS-Filesystem" class="headerlink" title="ROS Filesystem"></a>ROS Filesystem</h1><ul><li><strong>Packages</strong>: the software organization unit of ROS code, can contain libraries, executables, scripts, or other artifacts.</li><li><strong>Manifests</strong> (package.xml): a description of a <em>package</em>, defines dependencies between packages, captures meta information about the <em>package</em> like version, maintainer, license, etc...</li></ul><h2 id="Filesystem-Tools"><a href="#Filesystem-Tools" class="headerlink" title="Filesystem Tools"></a>Filesystem Tools</h2><p><code>rospack</code>, <code>roscd</code>, and <code>rosls</code></p><pre><code class="hljs inform7">$ rospack find <span class="hljs-comment">[package_name]</span># returns the package path$ roscd <span class="hljs-comment">[locationname<span class="hljs-comment">[/subdir]</span>]</span> $ rosls <span class="hljs-comment">[locationname<span class="hljs-comment">[/subdir]</span>]</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS Launch</title>
    <link href="/2020/11/17/ROS_Launch/"/>
    <url>/2020/11/17/ROS_Launch/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS-Launch"><a href="#ROS-Launch" class="headerlink" title="ROS Launch"></a>ROS Launch</h1><h2 id="ROS-Launch-文件是什么，如何运行"><a href="#ROS-Launch-文件是什么，如何运行" class="headerlink" title="ROS Launch 文件是什么，如何运行"></a>ROS Launch 文件是什么，如何运行</h2><p>ROS Launch文件是可以::同时运行多个nodes::的文件。Launch文件以一种特殊的XML格式编写，在ROS packages中使用广泛。</p><p><code>rosrun</code>只能运行一个nodes， <code>roslaunch</code>可以同时运行多个nodes.</p><ul><li>运行launch file<br><code>roslaunch package_name launch_file_name</code></li></ul><p>Launch file可以不在package中，此时需指出该launch文件的绝对路径，即可运行。</p><p><code>roslaunch absolute_path/launch_file_name</code></p><h2 id="如何创建ROS-Launch文件"><a href="#如何创建ROS-Launch文件" class="headerlink" title="如何创建ROS Launch文件"></a>如何创建ROS Launch文件</h2><ol><li>launch文件以<code>.launch</code>为后缀，放在ROS package的launch文件夹下。</li><li>Launch文件是XML文件，每个XML文件必须有一个root element。而launch文件的root element由一对launch 标签定义。<pre><code class="hljs applescript">&lt;<span class="hljs-built_in">launch</span>&gt;...&lt;/<span class="hljs-built_in">launch</span>&gt;</code></pre>Launch文件中的其他elements必须都在这一对tags之间。</li><li>launch文件的核心是一系列node elements，每个node element启动一个node。Node element看起来如下：<pre><code class="hljs routeros">&lt;node <span class="hljs-attribute">pkg</span>=<span class="hljs-string">&quot;package_name&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;executable_name&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;node_name&quot;</span>/&gt;</code></pre>如果该node中有其他tag，必须使用以下形式：<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">pkg</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;...&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span></code></pre></li></ol><p>一个node element必须包含三个属性: <code>pkg</code>, <code>type</code>, <code>name</code>.<br><code>pkg</code>和<code>type</code>指出ROS应该运行哪个package中的哪个node。<br><code>type</code>是可执行文件的名称。<br><code>name</code>是可以任意给出的，它覆盖了原有文件中的<code>ros::init</code>制定的<code>node_name</code>.</p><h2 id="Including-other-launch-files"><a href="#Including-other-launch-files" class="headerlink" title="Including other launch files"></a>Including other launch files</h2><p>include其他launch file中的node和parameters</p><p>必须写出该launch文件的全部路径名称，较繁琐。<br><code>&lt;include file=”path-to-launch-file”/&gt;</code></p><p>常用：<br><code>&lt;include file=”$(find package_name)/launch_file_name”/&gt;</code></p><p>include也支持ns属性，将它的内容放进指定的namespace。<br><code>&lt;include file=”...” ns=”namespace_name”/&gt;</code></p><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><p>The <code>&lt;param&gt;</code> tag defines a parameter to be set on the  <a href="http://wiki.ros.org/Parameter%20Server">Parameter Server</a> . </p><p>Parameters是ROS系统使用的数值，存在parameter server上，nodes可通过<code>ros::param::get</code>函数编程得到它，用户可通过<code>rosparam</code>获取它。</p><h2 id="Argument"><a href="#Argument" class="headerlink" title="Argument"></a>Argument</h2><p>为便于launch文件重构，roslaunch支持launch arguments,也称为arguments或者args，类似于局部变量。</p><p>arguments仅在launch文件内部有意义，nodes不能直接获取它们的值。</p><ol><li><p>声明argument<br><code>&lt;arg name=&quot;arg_name&quot;/&gt;</code></p></li><li><p>指定argument的值<br>Launch文件中的每个argument都必须有指定值。赋值方法有好几种。</p><ul><li>在命令行赋值   <code>$ roslaunch package_name launch_file_name arg_name:=arg_value</code></li><li>在声明argument时赋值:<ul><li><code>&lt;arg name=”arg_name” default=”arg_name”/&gt;</code></li><li><code>&lt;arg name=”arg_name” value=”arg_name”/&gt;</code></li><li>上面两行的区别在于，命令行参数可以覆盖default，但是不能重写value的值。</li></ul></li></ul></li><li><p>获取argument的值</p><ul><li>一旦声明某个argument并赋值后，我们可以通过arg使用该argument.   <code>$(arg arg_name)</code></li><li>如果该行出现，roslaunch将会用给定arg_name的值替换其左边的值。</li></ul></li><li><p>将argument值传给included launch文件</p><pre><code class="hljs livecodeserver">&lt;<span class="hljs-built_in">include</span> <span class="hljs-built_in">file</span>=<span class="hljs-string">&quot;path-to-file&quot;</span>&gt;&lt;arg name=<span class="hljs-string">&quot;arg_name&quot;</span> <span class="hljs-built_in">value</span>=<span class="hljs-string">&quot;arg_value&quot;</span>/&gt;...&lt;/<span class="hljs-built_in">include</span>&gt;</code></pre></li></ol><p>若在launch文件中，launch文件及其包含的launch文件出现相同的arguments，则需在launch文件及included launch文件中同时写：<br><code>&lt;arg name=&quot;arg_name&quot; value=&quot;$(arg arg_name)&quot;/&gt;</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="http://wiki.ros.org/roslaunch">http://wiki.ros.org/roslaunch</a><br><a href="http://ttshun.com/2018/05/24/ROS%E5%AD%A6%E4%B9%A0%E4%B9%8Broslaunch/">ROS学习之roslaunch | 励志献身SLAM 的 阿翔</a><br><a href="https://www.cnblogs.com/Jessica-jie/p/6961837.html">ROS launch总结 - Jessica&amp;jie - 博客园</a>  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS Package</title>
    <link href="/2020/11/17/ROS_Package/"/>
    <url>/2020/11/17/ROS_Package/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS-Package"><a href="#ROS-Package" class="headerlink" title="ROS Package"></a>ROS Package</h1><h2 id="Creating-a-ROS-Package"><a href="#Creating-a-ROS-Package" class="headerlink" title="Creating a ROS Package"></a>Creating a ROS Package</h2><p>Requirements for a catkin package:</p><ul><li>Must contain <code>package.xml</code>, which provides meta information about the package</li><li>Must contain <code>CMakeLists.txt</code>, which uses <strong>catkin</strong>.</li><li>Each package must have its own folder</li></ul><p>Simplest package structure:</p><pre><code class="hljs reasonml">my_package/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CMakeLists</span>.</span></span>txtpackage.xml</code></pre><h2 id="Packages-in-a-catkin-Workspace"><a href="#Packages-in-a-catkin-Workspace" class="headerlink" title="Packages in a catkin Workspace"></a>Packages in a catkin Workspace</h2><ul><li><p>Using a catkin workspace to work with catkin packages is recommended. Refer to <a href="/2020/11/17/ROS_Workspace/" title="ROS Workspace">ROS Workspace</a></p></li><li><p>You can also build catkin packages standalone.</p></li></ul><h2 id="Creating-a-catkin-Package"><a href="#Creating-a-catkin-Package" class="headerlink" title="Creating a catkin Package"></a>Creating a catkin Package</h2>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS Services and Parameters</title>
    <link href="/2020/11/17/ROS_Services_and_Parameters/"/>
    <url>/2020/11/17/ROS_Services_and_Parameters/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS-Services-and-Parameters"><a href="#ROS-Services-and-Parameters" class="headerlink" title="ROS Services and Parameters"></a>ROS Services and Parameters</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="http://wiki.ros.org/ROS/Tutorials/UnderstandingServicesParams">ROS/Tutorials/UnderstandingServicesParams - ROS Wiki</a><br><a href="http://wiki.ros.org/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29">ROS/Tutorials/WritingServiceClient(c++) - ROS Wiki</a>  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS Workspace</title>
    <link href="/2020/11/17/ROS_Workspace/"/>
    <url>/2020/11/17/ROS_Workspace/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS-Workspace"><a href="#ROS-Workspace" class="headerlink" title="ROS Workspace"></a>ROS Workspace</h1><h2 id="Create-a-ROS-workspace"><a href="#Create-a-ROS-workspace" class="headerlink" title="Create a ROS workspace"></a>Create a ROS workspace</h2><p>::Create and build a <strong>catkin workspace</strong>:::</p><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>mkdir -p ~<span class="hljs-regexp">/catkin_ws/src</span><span class="hljs-variable">$ </span>cd ~<span class="hljs-regexp">/catkin_ws/</span><span class="hljs-variable">$ </span>catkin_make</code></pre><p>This will create a <code>CMakeLists.txt</code> link in your <code>src/</code> folder.<br>This will also create a <code>build/</code> and <code>devel/</code> folder in your current working directory.<br>Inside <code>devel</code>, there are several <code>setup.*sh</code> files. Source any of them to overlay this workspace on top os your environment.</p><p><code>$ source devel/setup.*sh</code></p><p>Make sure <code>ROS_PACKAGE_PATH</code> environment variable includes the directory.</p><pre><code class="hljs awk">$ echo <span class="hljs-variable">$ROS_PACKAGE_PATH</span><span class="hljs-regexp">/home/</span>zhaiky<span class="hljs-regexp">/cakin_ws/</span>src:<span class="hljs-regexp">/opt/</span>ros<span class="hljs-regexp">/melodic/</span>share</code></pre><h2 id="catkin-workspaces"><a href="#catkin-workspaces" class="headerlink" title="catkin workspaces:"></a><strong>catkin workspaces</strong>:</h2><p><strong>catkin workspaces</strong> can be built as </p><ol><li>A standalone project, like normal <code>cmake</code> projects</li><li>Also provides the concept of workspaces, where you can build multiple, interdependent packages together all at once.</li></ol><p>A <strong>catkin workspace</strong> is a <strong>folder</strong> where you modify, build, and install <strong>catkin packages</strong>. </p><p>Typical <strong>catkin workspace</strong> layout:</p><pre><code class="hljs crystal">workspace_folder/         -- WORKSPACE  src/                    -- SOURCE SPACE    CMakeLists.txt        -- The <span class="hljs-string">&#x27;toplevel&#x27;</span> CMake file    package_1/      CMakeLists.txt      package.xml      ...    package_n/      CATKIN_IGNORE       -- Optional empty file to exclude package_n from being processed      CMakeLists.txt      package.xml      ...  build/                  -- BUILD SPACE    CATKIN_IGNORE         -- Keeps catkin from walking this directory  devel/                  -- DEVELOPMENT SPACE (set by CATKIN_DEVEL_PREFIX)    bin/    etc/    <span class="hljs-keyword">include</span>/    <span class="hljs-class"><span class="hljs-keyword">lib</span>/</span>    share/    .catkin    env.bash    setup.bash    setup.sh    ...  install/                -- INSTALL SPACE (set by CMAKE_INSTALL_PREFIX)    bin/    etc/    <span class="hljs-keyword">include</span>/    <span class="hljs-class"><span class="hljs-keyword">lib</span>/</span>    share/    .catkin                 env.bash    setup.bash    setup.sh    ...</code></pre><p>Four spaces: <code>src/</code>, <code>build/</code>, <code>devel/</code>, and <code>install/</code>.</p><h3 id="Source-Space-src"><a href="#Source-Space-src" class="headerlink" title="Source Space src/"></a>Source Space <code>src/</code></h3><ul><li>contains source code of catkin packages</li><li>where you can extract/checkout/clone source code for the packages you want to build.</li><li>each folder <code>package_1</code>...<code>package_n</code> within the source space contains one or more <strong>catkin packages</strong></li></ul><h3 id="Build-Space-build"><a href="#Build-Space-build" class="headerlink" title="Build Space build/"></a>Build Space <code>build/</code></h3><ul><li>where <code>CMake</code> is invoked to build the catkin packages in the source space</li></ul><h3 id="Development-Space-devel"><a href="#Development-Space-devel" class="headerlink" title="Development Space devel/"></a>Development Space <code>devel/</code></h3><ul><li>where built targets are placed prior to being installed</li></ul><h3 id="Install-Space-install"><a href="#Install-Space-install" class="headerlink" title="Install Space install/"></a>Install Space <code>install/</code></h3><ul><li>Once targets are built, they can be installed into the install space by invoking the install target.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>CS283</category>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Robotics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置 zsh</title>
    <link href="/2020/11/17/zsh/"/>
    <url>/2020/11/17/zsh/</url>
    
    <content type="html"><![CDATA[<h1 id="设置-zsh"><a href="#设置-zsh" class="headerlink" title="设置 zsh"></a>设置 zsh</h1><h2 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h2><p>查看系统里已经安装的shell: <code>cat /etc/shells</code>.</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> /etc/shells: valid login shells</span>/bin/sh/bin/bash/bin/rbash/bin/dash/usr/bin/tmux/usr/bin/screen</code></pre><p>Mac默认是安装zsh的，Linux没有装。Ubuntu上安装zsh: <code>sudo apt-get install zsh</code>.</p><p>再用 <code>cat /etc/shells</code>查看已安装的shell:</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> /etc/shells: valid login shells</span>/bin/sh/bin/bash/bin/rbash/bin/dash/usr/bin/tmux/usr/bin/screen/bin/zsh/usr/bin/zsh</code></pre><p>发现zsh已经安装好了。把当前shell改为zsh: <code>chsh -s /bin/zsh</code>.</p><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h2><p>自动安装: <code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></p><h2 id="配置-zsh"><a href="#配置-zsh" class="headerlink" title="配置 zsh"></a>配置 zsh</h2><p>安装插件</p><ul><li>auto-suggestions<ul><li>任意目录下: <code>git clone git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions</code></li><li><code>.zshrc</code>里加入<code>plugins=(git zsh-autosuggestions)</code>, 然后<code>source ~/.zshrc</code>.</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Configuration</category>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Building Blog</title>
    <link href="/2020/11/17/Blog/"/>
    <url>/2020/11/17/Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="Building-Blog"><a href="#Building-Blog" class="headerlink" title="Building Blog"></a>Building Blog</h1><ul><li><p>hexo</p></li><li><p>fluid</p><ul><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/">fluid 官网</a></li></ul></li><li><p>Markdown</p><ul><li><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 菜鸟教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/59412540">数学公式</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sniper</title>
    <link href="/2020/11/17/Sniper/"/>
    <url>/2020/11/17/Sniper/</url>
    
    <content type="html"><![CDATA[<h1 id="Learning-Sniper"><a href="#Learning-Sniper" class="headerlink" title="Learning Sniper"></a>Learning Sniper</h1><h2 id="What-is-Sniper"><a href="#What-is-Sniper" class="headerlink" title="What is Sniper"></a>What is Sniper</h2><p><strong>Sniper</strong> is a next-generation parallel, high-speed and accurate <strong>x86 simulator</strong>. It is written in C++.</p><h2 id="How-to-compile-Sniper"><a href="#How-to-compile-Sniper" class="headerlink" title="How to compile Sniper"></a>How to compile Sniper</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><pre><code class="hljs shell">OS: Ubuntu 16.04, 18.04, or 20.04gcc: 7.5.0 or 9.3.0</code></pre><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li>Get Sniper source code.</li><li>Input the following commands in the terminal:</li></ol><p><strong>Make sure to use python2</strong></p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$PATH_TO_SNIPER</span> </span><span class="hljs-meta">$</span><span class="bash"> sudo dpkg --add-architecture i386</span><span class="hljs-meta">$</span><span class="bash"> sudo apt-get install binutils build-essential curl git libboost-dev libbz2-dev libc6:i386 libncurses5:i386 libsqlite3-dev libstdc++6:i386 python wget zlib1g-dev</span><span class="hljs-meta">$</span><span class="bash"> make</span></code></pre><h2 id="Run-a-program-using-Sniper"><a href="#Run-a-program-using-Sniper" class="headerlink" title="Run a program using Sniper"></a>Run a program using Sniper</h2><p>Sniper is an x86 simulator, it can be used to run executables.</p><p>Say you have an executable <code>program1.exe</code> and a config file <code>config1.cfg</code> under the directory at <code>$PATH_TO_FILE</code>. You can run the executable by Sniper with the following commands:</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$PATH_TO_SNIPER</span> </span><span class="hljs-meta">$</span><span class="bash"> ./run-sniper -c <span class="hljs-variable">$PATH_TO_FILE</span>/config1.cfg -- <span class="hljs-variable">$PATH_TO_FILE</span>/program1.exe</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://groups.google.com/g/snipersim">Google Group of Sniper</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Courses</category>
      
      <category>Fall 2020</category>
      
      <category>TA</category>
      
      <category>CS211</category>
      
      <category>Lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Architecture</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
